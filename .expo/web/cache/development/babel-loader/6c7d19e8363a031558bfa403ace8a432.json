{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-tabs/src/utils/withDimensions.tsx\";\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nexport var isOrientationLandscape = function isOrientationLandscape(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width > height;\n};\nexport default function withDimensions(WrappedComponent) {\n  var _Dimensions$get = Dimensions.get('window'),\n      width = _Dimensions$get.width,\n      height = _Dimensions$get.height;\n\n  var EnhancedComponent = function (_React$Component) {\n    _inherits(EnhancedComponent, _React$Component);\n\n    function EnhancedComponent() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, EnhancedComponent);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EnhancedComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        dimensions: {\n          width: width,\n          height: height\n        },\n        isLandscape: isOrientationLandscape({\n          width: width,\n          height: height\n        })\n      };\n\n      _this.handleOrientationChange = function (_ref2) {\n        var window = _ref2.window;\n        var isLandscape = isOrientationLandscape(window);\n\n        _this.setState({\n          isLandscape: isLandscape\n        });\n      };\n\n      return _this;\n    }\n\n    _createClass(EnhancedComponent, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        Dimensions.addEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        Dimensions.removeEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(WrappedComponent, _extends({}, this.props, this.state, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          }\n        }));\n      }\n    }]);\n\n    return EnhancedComponent;\n  }(React.Component);\n\n  EnhancedComponent.displayName = \"withDimensions(\" + WrappedComponent.displayName + \")\";\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}","map":{"version":3,"sources":["withDimensions.tsx"],"names":["isOrientationLandscape","width","height","Dimensions","EnhancedComponent","React","WrappedComponent","dimensions","isLandscape","window","hoistNonReactStatic"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\ntype DimensionsType = {\n  width: number;\n  height: number;\n};\n\ntype InjectedProps = {\n  dimensions: DimensionsType;\n  isLandscape: boolean;\n};\n\nexport const isOrientationLandscape = ({ width, height }: DimensionsType) =>\n  width > height;\n\nexport default function withDimensions<Props extends InjectedProps>(\n  WrappedComponent: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  const { width, height } = Dimensions.get('window');\n\n  class EnhancedComponent extends React.Component {\n    static displayName = `withDimensions(${WrappedComponent.displayName})`;\n\n    state = {\n      dimensions: { width, height },\n      isLandscape: isOrientationLandscape({ width, height }),\n    };\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      const isLandscape = isOrientationLandscape(window);\n      this.setState({ isLandscape });\n    };\n\n    render() {\n      // @ts-ignore\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  // @ts-ignore\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"module"}