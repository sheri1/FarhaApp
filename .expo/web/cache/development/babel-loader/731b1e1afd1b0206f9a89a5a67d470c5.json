{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from \"react\";\nimport * as firebase from 'firebase';\n;\nimport * as Permissions from 'expo-permissions';\nimport { Notifications } from 'expo';\nimport { Form } from \"native-base\";\n\nvar registerPushNotification = function registerPushNotification() {\n  var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status, token, uid;\n\n  return _regeneratorRuntime.async(function registerPushNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 2:\n          _await$Permissions$ge = _context.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 8:\n          _await$Permissions$as = _context.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 11:\n          if (!(finalStatus !== 'granted')) {\n            _context.next = 14;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context.abrupt(\"return\");\n\n        case 14:\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 16:\n          token = _context.sent;\n          console.log(token);\n          uid = firebase.auth().currentUser.uid;\n          firebase.firestore().collection('users').doc(uid).update({\n            expoPushToken: token\n          });\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport { registerPushNotification };","map":{"version":3,"sources":["C:/Users/jit/Desktop/farhasheri/notifications/index.js"],"names":["React","Component","firebase","Permissions","Notifications","Form","registerPushNotification","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","console","log","uid","auth","currentUser","firestore","collection","doc","update","expoPushToken"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAQ,KAAKC,QAAb,MAA2B,UAA3B;AAAsC;AAEtC,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,SAAQC,aAAR,QAA4B,MAA5B;AAEE,SAASC,IAAT,QAAqB,aAArB;;AACF,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAGcH,WAAW,CAACI,QAAZ,CAAqBJ,WAAW,CAACK,aAAjC,CAHd;;AAAA;AAAA;AAGXC,UAAAA,cAHW,yBAGnBC,MAHmB;AAIvBC,UAAAA,WAJuB,GAITF,cAJS;;AAAA,gBAMvBA,cAAc,KAAK,SANI;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAOCN,WAAW,CAACS,QAAZ,CAAqBT,WAAW,CAACK,aAAjC,CAPD;;AAAA;AAAA;AAOhBE,UAAAA,MAPgB,yBAOhBA,MAPgB;AAQxBC,UAAAA,WAAW,GAAGD,MAAd;;AARwB;AAAA,gBAWtBC,WAAW,KAAK,SAXM;AAAA;AAAA;AAAA;;AAYxBE,UAAAA,KAAK,CAAC,iDAAD,CAAL;AAZwB;;AAAA;AAAA;AAAA,2CAiBRT,aAAa,CAACU,qBAAd,EAjBQ;;AAAA;AAiBtBC,UAAAA,KAjBsB;AAkB1BC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAGIG,UAAAA,GArBsB,GAqBhBhB,QAAQ,CAACiB,IAAT,GAAgBC,WAAhB,CAA4BF,GArBZ;AA0B3BhB,UAAAA,QAAQ,CAACmB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,GAAzC,CAA6CL,GAA7C,EAAkDM,MAAlD,CAAyD;AACvDC,YAAAA,aAAa,EAAGV;AADuC,WAAzD;;AA1B2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC;;AAgCA,SAAST,wBAAT","sourcesContent":["import React, { Component } from \"react\";\r\nimport  * as firebase from 'firebase';;\r\n// import * as Notifications from 'expo-notifications';\r\nimport * as Permissions from 'expo-permissions';\r\nimport {Notifications} from 'expo';\r\n\r\n  import { Form } from \"native-base\";\r\nconst registerPushNotification = async () => {\r\n        \r\n      //check for existing permission \r\n      const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\r\n      let finalStatus = existingStatus;\r\n      //check the state of existing permisson (آخذ اذن اليوزر لو فش بيرميشن)\r\n      if (existingStatus !== 'granted') {\r\n         const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\r\n         finalStatus = status;\r\n       }\r\n       // if no permission exit the function \r\n       if (finalStatus !== 'granted') {\r\n         alert('Failed to get push token for push notification!');\r\n         return;\r\n       }\r\n \r\n       //get push notification token \r\n       let token = await Notifications.getExpoPushTokenAsync();\r\n       console.log(token);\r\n \r\n       //add token to firebase\r\n       let uid = firebase.auth().currentUser.uid;\r\n      //  firebase.database().ref(\"users\").child(uid).update({\r\n      //    expoPushToken : token\r\n      //  });\r\n\r\n      firebase.firestore().collection('users').doc(uid).update({\r\n        expoPushToken : token\r\n\r\n       });\r\n\r\n}\r\nexport { registerPushNotification };\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}