{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport NativeInterface from \"./nativeInterface\";\nimport InternetReachability from \"./internetReachability\";\nimport Utils from \"./utils\";\nvar DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\nvar _isSetup = false;\nvar _nativeEventSubscription = null;\nvar _internetReachabilitySubscription = null;\n\nvar _subscriptions = new Set();\n\nvar _latestState = null;\n\nfunction fetchCurrentState() {\n  return Utils.currentState().then(function (state) {\n    InternetReachability.update(state);\n    var convertedState = Utils.convertState(state);\n    _latestState = convertedState;\n    return convertedState;\n  });\n}\n\nexport function setup() {\n  if (_isSetup) {\n    return;\n  }\n\n  _nativeEventSubscription = NativeInterface.eventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (state) {\n    InternetReachability.update(state);\n    var convertedState = Utils.convertState(state);\n    _latestState = convertedState;\n\n    _subscriptions.forEach(function (handler) {\n      return handler(convertedState);\n    });\n  });\n  fetchCurrentState();\n  _internetReachabilitySubscription = InternetReachability.addSubscription(function (isInternetReachable) {\n    if (!_latestState) {\n      return;\n    }\n\n    var nextState = _objectSpread({}, _latestState, {\n      isInternetReachable: isInternetReachable\n    });\n\n    _latestState = nextState;\n\n    _subscriptions.forEach(function (handler) {\n      return handler(nextState);\n    });\n  });\n  _isSetup = true;\n}\nexport function tearDown() {\n  if (!_isSetup) {\n    return;\n  }\n\n  if (_nativeEventSubscription) {\n    _nativeEventSubscription.remove();\n  }\n\n  _subscriptions.clear();\n\n  InternetReachability.clear();\n\n  if (_internetReachabilitySubscription) {\n    _internetReachabilitySubscription();\n  }\n\n  _isSetup = false;\n}\nexport function latest() {\n  if (_latestState) {\n    return Promise.resolve(_latestState);\n  } else {\n    return fetchCurrentState();\n  }\n}\nexport function add(handler) {\n  _subscriptions.add(handler);\n\n  if (_latestState) {\n    handler(_latestState);\n  } else {\n    latest().then(handler);\n  }\n}\nexport function remove(handler) {\n  _subscriptions.delete(handler);\n}\nexport default {\n  setup: setup,\n  tearDown: tearDown,\n  latest: latest,\n  add: add,\n  remove: remove\n};","map":{"version":3,"sources":["state.ts"],"names":["DEVICE_CONNECTIVITY_EVENT","_isSetup","_nativeEventSubscription","_internetReachabilitySubscription","_subscriptions","_latestState","Utils","InternetReachability","convertedState","NativeInterface","handler","fetchCurrentState","nextState","isInternetReachable","Promise","latest","setup","tearDown","add","remove"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport Utils from './utils';\n\nconst DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\nlet _isSetup = false;\nlet _nativeEventSubscription: NativeEventSubscription | null = null;\nlet _internetReachabilitySubscription: (() => void) | null = null;\nconst _subscriptions = new Set<Types.NetInfoChangeHandler>();\nlet _latestState: Types.NetInfoState | null = null;\n\nfunction fetchCurrentState(): Promise<Types.NetInfoState> {\n  return Utils.currentState().then(\n    (state): Types.NetInfoState => {\n      // Update the internet reachability module\n      InternetReachability.update(state);\n\n      // Convert and store the new state\n      const convertedState = Utils.convertState(state);\n      _latestState = convertedState;\n      return convertedState;\n    },\n  );\n}\n\nexport function setup(): void {\n  // Skip if we are already setup\n  if (_isSetup) {\n    return;\n  }\n\n  // Add the subscription to the natvie events\n  _nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n    DEVICE_CONNECTIVITY_EVENT,\n    (state): void => {\n      // Update the internet reachability module\n      InternetReachability.update(state);\n\n      // Convert the state from native to JS shape\n      const convertedState = Utils.convertState(state);\n\n      // Update the listeners\n      _latestState = convertedState;\n      _subscriptions.forEach((handler): void => handler(convertedState));\n    },\n  );\n\n  // Fetch the current state from the native module\n  fetchCurrentState();\n\n  // Add the listener to the internet connectivity events\n  _internetReachabilitySubscription = InternetReachability.addSubscription(\n    (isInternetReachable): void => {\n      if (!_latestState) {\n        return;\n      }\n\n      const nextState = {\n        ..._latestState,\n        isInternetReachable,\n      } as Types.NetInfoState;\n      _latestState = nextState;\n      _subscriptions.forEach((handler): void => handler(nextState));\n    },\n  );\n\n  // We are are now setup\n  _isSetup = true;\n}\n\nexport function tearDown(): void {\n  // Skip if we are not setup\n  if (!_isSetup) {\n    return;\n  }\n\n  if (_nativeEventSubscription) {\n    _nativeEventSubscription.remove();\n  }\n  _subscriptions.clear();\n  InternetReachability.clear();\n  if (_internetReachabilitySubscription) {\n    _internetReachabilitySubscription();\n  }\n\n  // We are are no longer setup\n  _isSetup = false;\n}\n\nexport function latest(): Promise<Types.NetInfoState> {\n  if (_latestState) {\n    return Promise.resolve(_latestState);\n  } else {\n    return fetchCurrentState();\n  }\n}\n\nexport function add(handler: Types.NetInfoChangeHandler): void {\n  // Add the subscription handler to our set\n  _subscriptions.add(handler);\n\n  // Send it the latest data we have\n  if (_latestState) {\n    handler(_latestState);\n  } else {\n    latest().then(handler);\n  }\n}\n\nexport function remove(handler: Types.NetInfoChangeHandler): void {\n  _subscriptions.delete(handler);\n}\n\nexport default {\n  setup,\n  tearDown,\n  latest,\n  add,\n  remove,\n};\n"]},"metadata":{},"sourceType":"module"}