{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/react-native-tab-view/src/TabView.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport TabBar from \"./TabBar\";\nimport Pager from \"./Pager\";\nimport SceneView from \"./SceneView\";\n\nvar TabView = function (_React$Component) {\n  _inherits(TabView, _React$Component);\n\n  function TabView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      layout: _objectSpread({\n        width: 0,\n        height: 0\n      }, _this.props.initialLayout)\n    };\n\n    _this.jumpToIndex = function (index) {\n      if (index !== _this.props.navigationState.index) {\n        _this.props.onIndexChange(index);\n      }\n    };\n\n    _this.handleLayout = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (_this.state.layout.width === width && _this.state.layout.height === height) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          positionListener = _this$props.position,\n          onSwipeStart = _this$props.onSwipeStart,\n          onSwipeEnd = _this$props.onSwipeEnd,\n          navigationState = _this$props.navigationState,\n          lazy = _this$props.lazy,\n          lazyPreloadDistance = _this$props.lazyPreloadDistance,\n          removeClippedSubviews = _this$props.removeClippedSubviews,\n          keyboardDismissMode = _this$props.keyboardDismissMode,\n          swipeEnabled = _this$props.swipeEnabled,\n          swipeVelocityImpact = _this$props.swipeVelocityImpact,\n          timingConfig = _this$props.timingConfig,\n          springConfig = _this$props.springConfig,\n          tabBarPosition = _this$props.tabBarPosition,\n          renderTabBar = _this$props.renderTabBar,\n          renderScene = _this$props.renderScene,\n          renderLazyPlaceholder = _this$props.renderLazyPlaceholder,\n          sceneContainerStyle = _this$props.sceneContainerStyle,\n          style = _this$props.style,\n          gestureHandlerProps = _this$props.gestureHandlerProps,\n          springVelocityScale = _this$props.springVelocityScale;\n      var layout = this.state.layout;\n      return React.createElement(View, {\n        onLayout: this.handleLayout,\n        style: [styles.pager, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      }, React.createElement(Pager, {\n        navigationState: navigationState,\n        layout: layout,\n        keyboardDismissMode: keyboardDismissMode,\n        swipeEnabled: swipeEnabled,\n        swipeVelocityImpact: swipeVelocityImpact,\n        timingConfig: timingConfig,\n        springConfig: springConfig,\n        onSwipeStart: onSwipeStart,\n        onSwipeEnd: onSwipeEnd,\n        onIndexChange: this.jumpToIndex,\n        springVelocityScale: springVelocityScale,\n        removeClippedSubviews: removeClippedSubviews,\n        gestureHandlerProps: gestureHandlerProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        }\n      }, function (_ref) {\n        var position = _ref.position,\n            render = _ref.render,\n            addListener = _ref.addListener,\n            removeListener = _ref.removeListener,\n            jumpTo = _ref.jumpTo;\n        var sceneRendererProps = {\n          position: position,\n          layout: layout,\n          jumpTo: jumpTo\n        };\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          }\n        }, positionListener ? React.createElement(Animated.Code, {\n          exec: Animated.set(positionListener, position),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          }\n        }) : null, tabBarPosition === 'top' && renderTabBar(_objectSpread({}, sceneRendererProps, {\n          navigationState: navigationState\n        })), render(navigationState.routes.map(function (route, i) {\n          return React.createElement(SceneView, _extends({}, sceneRendererProps, {\n            addListener: addListener,\n            removeListener: removeListener,\n            key: route.key,\n            index: i,\n            lazy: lazy,\n            lazyPreloadDistance: lazyPreloadDistance,\n            navigationState: navigationState,\n            style: sceneContainerStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            }\n          }), function (_ref2) {\n            var loading = _ref2.loading;\n            return loading ? renderLazyPlaceholder({\n              route: route\n            }) : renderScene(_objectSpread({}, sceneRendererProps, {\n              route: route\n            }));\n          });\n        })), tabBarPosition === 'bottom' && renderTabBar(_objectSpread({}, sceneRendererProps, {\n          navigationState: navigationState\n        })));\n      }));\n    }\n  }]);\n\n  return TabView;\n}(React.Component);\n\nTabView.defaultProps = {\n  tabBarPosition: 'top',\n  renderTabBar: function renderTabBar(props) {\n    return React.createElement(TabBar, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      }\n    }));\n  },\n  renderLazyPlaceholder: function renderLazyPlaceholder() {\n    return null;\n  },\n  keyboardDismissMode: 'auto',\n  swipeEnabled: true,\n  lazy: false,\n  lazyPreloadDistance: 0,\n  removeClippedSubviews: false,\n  springConfig: {},\n  timingConfig: {},\n  gestureHandlerProps: {}\n};\nexport { TabView as default };\nvar styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["TabView.tsx"],"names":["TabView","React","Component","defaultProps","tabBarPosition","renderTabBar","renderLazyPlaceholder","keyboardDismissMode","swipeEnabled","lazy","lazyPreloadDistance","removeClippedSubviews","springConfig","timingConfig","gestureHandlerProps","state","layout","width","height","jumpToIndex","index","handleLayout","e","positionListener","onSwipeStart","onSwipeEnd","navigationState","swipeVelocityImpact","renderScene","sceneContainerStyle","style","springVelocityScale","styles","position","render","addListener","removeListener","jumpTo","sceneRendererProps","Animated","route","loading","StyleSheet","pager","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport Pager from './Pager';\nimport SceneView from './SceneView';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerCommonProps,\n} from './types';\n\ntype Props<T extends Route> = PagerCommonProps & {\n  position?: Animated.Value<number>;\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: boolean;\n  lazyPreloadDistance: number;\n  removeClippedSubviews?: boolean;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'auto',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n    springConfig: {},\n    timingConfig: {},\n    gestureHandlerProps: {},\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      position: positionListener,\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      removeClippedSubviews,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeVelocityImpact,\n      timingConfig,\n      springConfig,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n      gestureHandlerProps,\n      springVelocityScale,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <View onLayout={this.handleLayout} style={[styles.pager, style]}>\n        <Pager\n          navigationState={navigationState}\n          layout={layout}\n          keyboardDismissMode={keyboardDismissMode}\n          swipeEnabled={swipeEnabled}\n          swipeVelocityImpact={swipeVelocityImpact}\n          timingConfig={timingConfig}\n          springConfig={springConfig}\n          onSwipeStart={onSwipeStart}\n          onSwipeEnd={onSwipeEnd}\n          onIndexChange={this.jumpToIndex}\n          springVelocityScale={springVelocityScale}\n          removeClippedSubviews={removeClippedSubviews}\n          gestureHandlerProps={gestureHandlerProps}\n        >\n          {({ position, render, addListener, removeListener, jumpTo }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {positionListener ? (\n                  <Animated.Code\n                    exec={Animated.set(positionListener, position)}\n                  />\n                ) : null}\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addListener={addListener}\n                        removeListener={removeListener}\n                        key={route.key}\n                        index={i}\n                        lazy={lazy}\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          }}\n        </Pager>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}