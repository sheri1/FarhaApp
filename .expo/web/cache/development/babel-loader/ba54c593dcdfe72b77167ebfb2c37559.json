{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jit\\\\Desktop\\\\farhasheri\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { decode, encode } from 'base-64';\n\nif (!global.btoa) {\n  global.btoa = encode;\n}\n\nif (!global.atob) {\n  global.atob = decode;\n}\n\nimport React, { Component } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { AppLoading } from \"expo\";\nimport { Asset } from \"expo-asset\";\nimport * as Font from \"expo-font\";\nimport * as Icon from \"@expo/vector-icons\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport MyAppNavigator from \"./navigators/MyAppNavigator\";\nimport NotificationScreen from \"./screens/NotificationScreen\";\nimport Firebase, { FirebaseProvider } from \"./config/Firebase\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      isLoadingComplete: false\n    };\n\n    _this._loadResourcesAsync = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.t0 = Promise;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, Icon.Ionicons.font, {}, Icon.MaterialIcons.font, {}, Icon.AntDesign.font, {}, Icon.Entypo.font, {}, Icon.EvilIcons.font, {}, Icon.MaterialCommunityIcons.font, {}, Icon.FontAwesome.font, {}, Icon.Foundation.font, {}, Icon.Octicons.font, {\n                cairo: require(\"./assets/fonts/Cairo-Regular.otf\"),\n                cairoBold: require(\"./assets/fonts/Cairo-Bold.otf\"),\n                tahoma: require(\"./assets/fonts/TAHOMA.otf\"),\n                tahomaBold: require(\"./assets/fonts/TAHOMA_BOLD.otf\"),\n                sansArabic: require(\"./assets/fonts/TheSansArabic-Plain.ttf\"),\n                sansArabicBold: require(\"./assets/fonts/TheSansArabic-Bold.ttf\"),\n                sansArabicExtraLight: require(\"./assets/fonts/TheSansArabic-ExtraLight.otf\")\n              })));\n\n            case 4:\n              _context.t1 = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Asset.loadAsync([]));\n\n            case 7:\n              _context.t2 = _context.sent;\n              _context.t3 = [_context.t1, _context.t2];\n              return _context.abrupt(\"return\", _context.t0.all.call(_context.t0, _context.t3));\n\n            case 12:\n              _context.prev = 12;\n              _context.t4 = _context[\"catch\"](0);\n              console.error(_context.t4);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]]);\n    };\n\n    _this._handleLoadingError = function (error) {\n      console.warn(error);\n    };\n\n    _this._handleFinishLoading = function () {\n      _this.setState({\n        isLoadingComplete: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      I18nManager.allowRTL(false);\n      var isRTLAndroid = Platform.OS === \"android\" && I18nManager.isRTL;\n\n      if (isRTLAndroid) {\n        I18nManager.forceRTL(false);\n        I18nManager.allowRTL(false);\n      }\n\n      if (!this.state.isLoadingComplete) {\n        return React.createElement(AppLoading, {\n          startAsync: this._loadResourcesAsync,\n          onError: this._handleLoadingError,\n          onFinish: this._handleFinishLoading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          }\n        });\n      } else {\n        return React.createElement(FirebaseProvider, {\n          value: Firebase,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          }\n        }, React.createElement(MyAppNavigator, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          }\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#eb3345\",\n    justifyContent: \"flex-end\"\n  }\n});","map":{"version":3,"sources":["C:/Users/jit/Desktop/farhasheri/App.js"],"names":["decode","encode","global","btoa","atob","React","Component","AppLoading","Asset","Font","Icon","MyAppNavigator","NotificationScreen","Firebase","FirebaseProvider","App","props","state","isLoadingComplete","_loadResourcesAsync","Promise","loadAsync","Ionicons","font","MaterialIcons","AntDesign","Entypo","EvilIcons","MaterialCommunityIcons","FontAwesome","Foundation","Octicons","cairo","require","cairoBold","tahoma","tahomaBold","sansArabic","sansArabicBold","sansArabicExtraLight","all","console","error","_handleLoadingError","warn","_handleFinishLoading","setState","I18nManager","allowRTL","isRTLAndroid","Platform","OS","isRTL","forceRTL","styles","StyleSheet","create","container","flex","backgroundColor","justifyContent"],"mappings":"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","sourcesContent":["import {decode, encode} from 'base-64'\r\nif (!global.btoa) { global.btoa = encode }\r\nif (!global.atob) { global.atob = decode }\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Platform, StyleSheet } from \"react-native\";\r\nimport { AppLoading } from \"expo\";\r\nimport { Asset } from \"expo-asset\";\r\nimport * as Font from \"expo-font\";\r\nimport * as Icon from \"@expo/vector-icons\";\r\nimport { I18nManager } from \"react-native\";\r\n\r\nimport MyAppNavigator from \"./navigators/MyAppNavigator\";\r\nimport NotificationScreen from './screens/NotificationScreen'\r\nimport Firebase, { FirebaseProvider } from './config/Firebase'\r\n\r\n// import {decode, encode} from './node_modules/Base64'\r\n//  if (!global.btoa) {  global.btoa = encode }\r\n//  if (!global.atob) { global.atob = decode }\r\n\r\n\r\n\r\n\r\n//import * as firebase from 'firebase';\r\n// import 'firebase/firestore';\r\n// require(\"firebase/firestore\");\r\n//import Firebase , {FirebaseContext} from './services/firebase/'\r\n\r\n\r\n\r\n// var firebaseConfig = {\r\n//   apiKey: \"AIzaSyBz9-AYNlazedYbCe3u7kTTVv1QTwAPHC4\",\r\n//   authDomain: \"graduationproject-22b8c.firebaseapp.com\",\r\n//   databaseURL: \"https://graduationproject-22b8c.firebaseio.com\",\r\n//   projectId: \"graduationproject-22b8c\",\r\n//   storageBucket: \"graduationproject-22b8c.appspot.com\",\r\n//   messagingSenderId: \"764813434020\",\r\n//   appId: \"1:764813434020:web:e8a6523cb34df5be339a31\",\r\n//   measurementId: \"G-QT70KJQRH1\"\r\n// };\r\n// // Initialize Firebase\r\n// firebase.initializeApp(firebaseConfig);\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n  state = {\r\n    isLoadingComplete: false,\r\n  };\r\n\r\n  render() {\r\n    I18nManager.allowRTL(false); //work on ios only\r\n    const isRTLAndroid = Platform.OS === \"android\" && I18nManager.isRTL; //work on android only\r\n    if (isRTLAndroid) {\r\n      I18nManager.forceRTL(false);\r\n      I18nManager.allowRTL(false);\r\n      // Expo.Updates.reload();\r\n    }\r\n    if (!this.state.isLoadingComplete) {\r\n      return (\r\n        <AppLoading\r\n          startAsync={this._loadResourcesAsync}\r\n          onError={this._handleLoadingError}\r\n          onFinish={this._handleFinishLoading}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        // <LoginScreen></LoginScreen>\r\n        // <RegisterScreen></RegisterScreen>\r\n        // <RegisterDoneScreen></RegisterDoneScreen>\r\n        // <ForgetPasswordScreen></ForgetPasswordScreen>\r\n        // <ChangePasswordScreen></ChangePasswordScreen>\r\n        // <SplashScreen></SplashScreen>\r\n        // <SliderScreen></SliderScreen>\r\n        // <ProfileScreen></ProfileScreen>\r\n        // <EditProfileScreen></EditProfileScreen>\r\n        // <NotificationScreen></NotificationScreen>\r\n        // <PolicyScreen></PolicyScreen>\r\n        // <UseRuleScreen></UseRuleScreen>\r\n        // <AboutAppScreen></AboutAppScreen>\r\n        // <CommonQuestionScreen></CommonQuestionScreen>\r\n        // <ContactScreen></ContactScreen>\r\n        // <ContactDoneScreen></ContactDoneScreen>\r\n        // <HomeScreen></HomeScreen>\r\n        // <MostWantedScreen></MostWantedScreen>\r\n        // <OffersScreen></OffersScreen>\r\n        // <FavoriteScreen></FavoriteScreen>\r\n        // <AddHallScreen></AddHallScreen>\r\n        // <AddHallStep3Screen></AddHallStep3Screen>\r\n        // <AddHallStep2Screen></AddHallStep2Screen>\r\n        // <AddHallDoneScreen></AddHallDoneScreen>\r\n        // <SearchScreen></SearchScreen>\r\n        // <OrderDetailScreen></OrderDetailScreen>\r\n        // <OrdersScreen></OrdersScreen>\r\n       \r\n       \r\n       <FirebaseProvider value={Firebase}>\r\n           <MyAppNavigator />\r\n        </FirebaseProvider>\r\n\r\n      );\r\n    }\r\n  }\r\n\r\n  _loadResourcesAsync = async () => {\r\n    try {\r\n      return Promise.all([\r\n        await Font.loadAsync({\r\n          ...Icon.Ionicons.font,\r\n          ...Icon.MaterialIcons.font,\r\n          ...Icon.AntDesign.font,\r\n          ...Icon.Entypo.font,\r\n          ...Icon.EvilIcons.font,\r\n          ...Icon.MaterialCommunityIcons.font,\r\n          ...Icon.FontAwesome.font,\r\n          ...Icon.Foundation.font,\r\n          ...Icon.Octicons.font,\r\n          cairo: require(\"./assets/fonts/Cairo-Regular.otf\"),\r\n          cairoBold: require(\"./assets/fonts/Cairo-Bold.otf\"),\r\n          tahoma:require('./assets/fonts/TAHOMA.otf'),\r\n          tahomaBold:require('./assets/fonts/TAHOMA_BOLD.otf'),\r\n          sansArabic:require('./assets/fonts/TheSansArabic-Plain.ttf'),\r\n          sansArabicBold:require('./assets/fonts/TheSansArabic-Bold.ttf'),\r\n          sansArabicExtraLight:require('./assets/fonts/TheSansArabic-ExtraLight.otf')\r\n        }),\r\n        await Asset.loadAsync([\r\n          // Asset.fromModule(require(\"./assets/images/comment_icon.png\")).uri,\r\n        ]),\r\n      ]);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  _handleLoadingError = (error) => {\r\n    console.warn(error);\r\n  };\r\n\r\n  _handleFinishLoading = () => {\r\n    this.setState({ isLoadingComplete: true });\r\n  };\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#eb3345\",\r\n    justifyContent: \"flex-end\",\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}